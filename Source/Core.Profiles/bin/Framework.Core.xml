<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Framework.Core</name>
    </assembly>
    <members>
        <member name="T:Framework.Core.Utilities.Email.MailConfiguration">
            <summary>
            Summary for MailConfiguration.
            </summary>
        </member>
        <member name="M:Framework.Core.Utilities.Email.MailConfiguration.Read">
            <summary>
            Reads the mail settings from configuration file.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailConfiguration.Current">
            <summary>
            Gets the current instance.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailConfiguration.SmtpServer">
            <summary>
            Gets an SMTP server address that should be used within application.
            </summary>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailConfiguration.SmtpUser">
            <summary>
            Gets an SMTP server login that should be used within application.
            </summary>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailConfiguration.SmtpPassword">
            <summary>
            Gets an SMTP server password that should be used within application.
            </summary>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailConfiguration.SmtpPort">
            <summary>
            Gets or sets the SMTP port.
            </summary>
            <value>The SMTP port.</value>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailConfiguration.FromEmail">
            <summary>
            Gets or sets from email.
            </summary>
            <value>From email.</value>
        </member>
        <member name="T:Framework.Core.Extensions.StringExtensions">
            <summary>
            Extends <see cref="T:System.String"/> class functionality.
            </summary>
        </member>
        <member name="M:Framework.Core.Extensions.StringExtensions.Capitalize(System.String)">
            <summary>
            Capitalizes a word.
            </summary>
            <param name="word">The word to be capitalized.</param>
            <returns>Capitalized <paramref name="word"/>.</returns>
        </member>
        <member name="M:Framework.Core.Extensions.StringExtensions.Pluralize(System.String)">
            <summary>
            Return the plural of a word.
            </summary>
            <param name="word">The singular form.</param>
            <returns>The plural form of <paramref name="word"/>.</returns>
        </member>
        <member name="M:Framework.Core.Extensions.StringExtensions.Singularize(System.String)">
            <summary>
            Return the singular of a word.
            </summary>
            <param name="word">The plural form.</param>
            <returns>The singular form of <paramref name="word"/>.</returns>
        </member>
        <member name="M:Framework.Core.Extensions.StringExtensions.Humanize(System.String)">
            <summary>
            Translate camelCase or PascalCase property name to human readable name (splits it to words and capitilize first word).
            </summary>
            <param name="propertyName">Property name in camelCase or PascalCase.</param>
            <returns>Human readable property name.</returns>
        </member>
        <member name="T:Framework.Core.Modules.IModule">
            <summary>
            Specifies interface for module with web extensions.
            </summary>
        </member>
        <member name="T:Framework.Core.Configuration.DatabasePlatform">
            <summary>
            Specifies supported database platforms.
            </summary>
        </member>
        <member name="F:Framework.Core.Configuration.DatabasePlatform.SqlServer">
            <summary>
            Microsoft SQL Server 2008 database.
            </summary>
        </member>
        <member name="F:Framework.Core.Configuration.DatabasePlatform.SqlServer2000">
            <summary>
            Microsoft SQL Server 2000 database.
            </summary>
        </member>
        <member name="F:Framework.Core.Configuration.DatabasePlatform.SqlServer2005">
            <summary>
            Microsoft SQL Server 2005 database.
            </summary>
        </member>
        <member name="F:Framework.Core.Configuration.DatabasePlatform.SQLite">
            <summary>
            SQLite database.
            </summary>
        </member>
        <member name="F:Framework.Core.Configuration.DatabasePlatform.MySQL">
            <summary>
            MySQL database.
            </summary>
        </member>
        <member name="F:Framework.Core.Configuration.DatabasePlatform.PostgreSQL">
            <summary>
            PostgreSQL database.
            </summary>
        </member>
        <member name="F:Framework.Core.Configuration.DatabasePlatform.Oracle9">
            <summary>
            Oracle9 database.
            </summary>
        </member>
        <member name="F:Framework.Core.Configuration.DatabasePlatform.Oracle10">
            <summary>
            Oracle10 database.
            </summary>
        </member>
        <member name="T:Framework.Core.IBootstrapperTask">
            <summary>
            Application start-up task.
            </summary>
        </member>
        <member name="M:Framework.Core.IBootstrapperTask.Execute(Framework.Core.IApplication,Castle.MicroKernel.IKernel)">
            <summary>
            Executes task.
            </summary>
            <param name="application">The application.</param>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="T:Framework.Core.DomainModel.IPersistent`1">
            <summary>
            This serves as a base interface for persistent objects.
            See <see cref="T:Framework.Core.DomainModel.GenericEntity`1"/> for default implementation.
            </summary>
            <typeparam name="TId">The type of entity identifier.</typeparam>
        </member>
        <member name="M:Framework.Core.DomainModel.IPersistent`1.IsTransient">
            <summary>
            Determines whether this instance is transient.
            </summary>
            <remarks>
            Transient objects are not associated with an item already in storage. For instance, a Customer is transient if its Id is 0.
            </remarks>
            <returns>
            <c>true</c> if this instance is transient; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Framework.Core.DomainModel.IPersistent`1.Id">
            <summary>
            Gets entity unique identifier.
            </summary>
            <value>Entity unique identifier.</value>
        </member>
        <member name="T:Framework.Core.DomainModel.ExcludeItemAttribute">
            <summary>
            Makes field not available for user.
            </summary>
        </member>
        <member name="T:Framework.Core.Configuration.IApplicationConfigurator">
            <summary>
            Specifies interface for database configurators.
            </summary>
        </member>
        <member name="M:Framework.Core.Configuration.IApplicationConfigurator.Configure(Framework.Core.IApplication,Castle.MicroKernel.IKernel)">
            <summary>
            Fills specified database configuration.
            </summary>
            <param name="application">The application.</param>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="P:Framework.Core.Configuration.IApplicationConfigurator.DatabaseConfiguration">
            <summary>
             Filled database configuration.
            </summary>
        </member>
        <member name="T:Framework.Core.Utilities.Email.MailTemplate">
            <summary>
            Template email class.
            </summary>
        </member>
        <member name="M:Framework.Core.Utilities.Email.MailTemplate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Framework.Core.Utilities.Email.MailTemplate"/> class.
            </summary>
            <param name="bodyTemplate">The body template.</param>
        </member>
        <member name="M:Framework.Core.Utilities.Email.MailTemplate.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Framework.Core.Utilities.Email.MailTemplate"/> class.
            </summary>
            <param name="templateDirectory">The template directory.</param>
            <param name="bodyTemplate">The body template.</param>
        </member>
        <member name="M:Framework.Core.Utilities.Email.MailTemplate.ReadTemplates(System.String)">
            <summary>
            Initialize new instance of MailTemplate.
            </summary>
            <param name="bodyTemplateFile">Name of the body template.</param>
        </member>
        <member name="M:Framework.Core.Utilities.Email.MailTemplate.AddAttachment(System.String)">
            <summary>
            Add attachment.
            </summary>
            <param name="path">Path to the file.</param>
        </member>
        <member name="M:Framework.Core.Utilities.Email.MailTemplate.GetFullTemplatePath(System.String)">
            <summary>
            Gets the full template path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Core.Utilities.Email.MailTemplate.AppendParam(System.String,System.String)">
            <summary>
            Appends param with its value to the email.
            </summary>
            <param name="key">Param Key</param>
            <param name="value">Param value.</param>
        </member>
        <member name="M:Framework.Core.Utilities.Email.MailTemplate.AppendParam(System.String,System.String,System.Boolean)">
            <summary>
            Apends param to the email.
            </summary>
            <param name="key">Param key.</param>
            <param name="value">Param value.</param>
            <param name="encode">If true. the param value will be encided.</param>
        </member>
        <member name="M:Framework.Core.Utilities.Email.MailTemplate.Send(System.String,System.String,System.String)">
            <summary>
            Send email.
            </summary>
            <param name="smtpHost">The SMTP host.</param>
            <param name="user">The SMTP user.</param>
            <param name="password">The SMTP password.</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Core.Utilities.Email.MailTemplate.Send">
            <summary>
            Send email.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Core.Utilities.Email.MailTemplate.SendMails">
            <summary>
            Sends mails to list of recipients specified in MailAddressCollection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailTemplate.From">
            <summary>
            From name.
            </summary>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailTemplate.FromEmail">
            <summary>
            From email.
            </summary>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailTemplate.To">
            <summary>
            To name.
            </summary>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailTemplate.ToEmail">
            <summary>
            To email.
            </summary>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailTemplate.Subject">
            <summary>
            Email subject.
            </summary>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailTemplate.IsHtmlFormat">
            <summary>
            Is HTML format enabled.
            </summary>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailTemplate.Attachments">
            <summary>
            Path to attachment.
            </summary>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailTemplate.SmtpHost">
            <summary>
            Gets the SMTP host.
            </summary>
            <value>The SMTP host.</value>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailTemplate.SmtpUser">
            <summary>
            Gets the SMTP user.
            </summary>
            <value>The SMTP user.</value>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailTemplate.SmtpPassword">
            <summary>
            Gets the SMTP password.
            </summary>
            <value>The SMTP password.</value>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailTemplate.Body">
            <summary>
            Gets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailTemplate.MailAddressCollection">
            <summary>
            Collection of target email addresses.
            </summary>
        </member>
        <member name="P:Framework.Core.Utilities.Email.MailTemplate.TemplateDirectory">
            <summary>
            Gets or sets the template directory.
            </summary>
            <value>The template directory.</value>
        </member>
        <member name="T:Framework.Core.Helpers.TransformationRule">
            <summary>
            Specified word transformation rule (regular expression pattern + replacment rule).
            </summary>
            <example>
            Transformation rules can be used for word plurilizing, f.e. rule:
            <code>new TransformationRule("sis$", "ses");</code>
            specified the rule that replaces end of word ends with "sis" to "ses".
            </example>
        </member>
        <member name="M:Framework.Core.Helpers.TransformationRule.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Framework.Core.Helpers.TransformationRule"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:Framework.Core.Helpers.TransformationRule.Apply(System.String)">
            <summary>
            Applies rule to word.
            </summary>
            <param name="word">The word to transform.</param>
            <returns>Transformed rule if rule applied to word specified or null otherwise.</returns>
        </member>
        <member name="T:Framework.Core.CoreInstaller">
            <summary>
            Registers standard framework components.
            </summary>
        </member>
        <member name="M:Framework.Core.CoreInstaller.Install(Castle.Windsor.IWindsorContainer,Castle.MicroKernel.IConfigurationStore)">
            <summary>
            Performs the installation in the <see cref="T:Castle.Windsor.IWindsorContainer"/>.
            </summary>
            <param name="container">The container.</param>
            <param name="store">The configuration store.</param>
        </member>
        <member name="T:Framework.Core.Controllers.BaseController">
            <summary>
            Provides controller basic functionality.
            </summary>
        </member>
        <member name="F:Framework.Core.Controllers.BaseController.MessagesKey">
            <summary>
            Key for flash messages queue.
            </summary>
        </member>
        <member name="M:Framework.Core.Controllers.BaseController.AddMessage(System.String,Framework.Core.Infrastructure.MessageType,System.Object[])">
            <summary>
            Adds the message to message queue.
            </summary>
            <param name="message">The message.</param>
            <param name="messageType">Type of the message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Framework.Core.Controllers.BaseController.Success(System.String)">
            <summary>
            Adds notice message to message queue.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Framework.Core.Controllers.BaseController.Notice(System.String)">
            <summary>
            Adds warning message to message queue.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Framework.Core.Controllers.BaseController.Information(System.String)">
            <summary>
            Adds information message to message queue.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Framework.Core.Controllers.BaseController.Error(System.String)">
            <summary>
            Adds error message to message queue.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Framework.Core.Controllers.BaseController.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="T:Framework.Core.Localization.CultureHelper">
            <summary>
            Culture helper.
            </summary>
        </member>
        <member name="F:Framework.Core.Localization.CultureHelper.NeutralCultureName">
            <summary>
             Neutral culture name.
            </summary>
        </member>
        <member name="M:Framework.Core.Localization.CultureHelper.GetAvailableCultures">
            <summary>
            Gets the available cultures.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Core.Localization.CultureHelper.GetCurrentLocale(System.Collections.Generic.IList{Framework.Core.Localization.ILocale})">
            <summary>
            Gets the current locale.
            </summary>
            <param name="locales">The locales.</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Core.Localization.CultureHelper.SetDefaultCulture(System.String)">
            <summary>
            Sets the default culture.
            </summary>
            <param name="cultureCode">The culture code.</param>
        </member>
        <member name="P:Framework.Core.Localization.CultureHelper.DefaultCulture">
            <summary>
            Gets the default culture.
            </summary>
            <value>The default culture.</value>
        </member>
        <member name="P:Framework.Core.Localization.CultureHelper.DefaultCultureName">
            <summary>
            Gets the default name of the culture.
            </summary>
            <value>The default name of the culture.</value>
        </member>
        <member name="T:Framework.Core.DomainModel.Entity">
            <summary>
            Provides a base class for your objects which will be persisted to the database.    
            </summary>
            <remarks>
            <para>Long identifier covers most common cases and provides better performance for x64 processors then int.</para>
            <para>See <see cref="T:Framework.Core.DomainModel.GenericEntity`1"/> if you need custom type identifier.</para>
            </remarks>
        </member>
        <member name="T:Framework.Core.DomainModel.GenericEntity`1">
            <summary>
            Provides a base class for persisntence objects (objects which will be persisted to the database or other data storage).
            </summary>
            <typeparam name="TId">The type of entity identifier.</typeparam>
            <remarks>
            For a discussion of this object, see 
            http://devlicio.us/blogs/billy_mccafferty/archive/2007/04/25/using-equals-gethashcode-effectively.aspx
            </remarks>
        </member>
        <member name="T:Framework.Core.DomainModel.BaseObject">
            <summary>
            Provides a standard base class for facilitating comparison of objects.
            </summary>
            <remarks>
            For a discussion of the implementation of Equals/GetHashCode, see 
            http://devlicio.us/blogs/billy_mccafferty/archive/2007/04/25/using-equals-gethashcode-effectively.aspx
            and http://groups.google.com/group/sharp-architecture/browse_thread/thread/f76d1678e68e3ece?hl=en for 
            an in depth and conclusive resolution.
            </remarks>
        </member>
        <member name="F:Framework.Core.DomainModel.BaseObject.HashMultiplier">
            <summary>
            To help ensure hashcode uniqueness, a carefully selected random number multiplier is used within the calculation. 
            Goodrich and Tamassia's Data Structures and Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number of collissions.
            </summary>
            <remarks>
            See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/ for more information.
            </remarks>
        </member>
        <member name="F:Framework.Core.DomainModel.BaseObject.signaturePropertiesDictionary">
            <summary>
            This static member caches the domain signature properties to avoid looking them up for each instance of the same type.
            </summary>
        </member>
        <member name="M:Framework.Core.DomainModel.BaseObject.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Framework.Core.DomainModel.BaseObject.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <remarks>
            This is used to provide the hashcode identifier of an object using the signature 
            properties of the object; although it's necessary for NHibernate's use, this can 
            also be useful for business logic purposes and has been included in this base 
            class, accordingly.  Since it is recommended that GetHashCode change infrequently, 
            if at all, in an object's lifetime, it's important that properties are carefully
            selected which truly represent the signature of an object.
            </remarks>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Framework.Core.DomainModel.BaseObject.HasSameObjectSignatureAs(Framework.Core.DomainModel.BaseObject)">
            <summary>
            You may override this method to provide your own comparison routine.
            </summary>
            <param name="compareTo">The <see cref="T:Framework.Core.DomainModel.BaseObject"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Framework.Core.DomainModel.BaseObject"/> has the same signature properties values as this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Framework.Core.DomainModel.BaseObject.GetSignatureProperties">
            <summary>
            <para>Gets the signature properties.</para>
            </summary>
            <remarks>
            Static dictionary used to reduce performance. So properties will be retrieved 
            only once per class for each thread after application start.
            </remarks>
            <returns>Set of properties that should be included in the object signature comparison.</returns>
        </member>
        <member name="M:Framework.Core.DomainModel.BaseObject.GetTypeSpecificSignatureProperties">
            <summary>
            Enforces the template method pattern to have child objects determine which specific
            properties should and should not be included in the object signature comparison.  
            </summary>
            <remarks>
            BaseObject already takes care of performance caching, so this method
            shouldn't worry about caching, just return set of properties.
            </remarks>
            <returns>Set of properties that should be included in the object signature comparison.</returns>
        </member>
        <member name="M:Framework.Core.DomainModel.BaseObject.GetInnerType">
            <summary>
            When NHibernate proxies objects, it masks the type of the actual entity object.
            This wrapper burrows into the proxied object to get its actual type.
            Although this assumes NHibernate is being used, it doesn't require any NHibernate
            related dependencies and has no bad side effects if NHibernate isn't being used.
            </summary>
            <remarks>Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a .</remarks>
            <returns>Type of inner object for proxied objects and type for simple objects.</returns>
        </member>
        <member name="M:Framework.Core.DomainModel.GenericEntity`1.IsTransient">
            <summary>
            Determines whether this instance is transient.
            </summary>
            <remarks>
            Transient objects are not associated with an item already in storage. For instance, a Customer is transient if its Id is 0.
            </remarks>
            <returns>
            <c>true</c> if this instance is transient; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Framework.Core.DomainModel.GenericEntity`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Framework.Core.DomainModel.GenericEntity`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <remarks>
            If object is persisntence, only Type and Id used for hash calculation.
            </remarks>
        </member>
        <member name="M:Framework.Core.DomainModel.GenericEntity`1.GetTypeSpecificSignatureProperties">
            <summary>
            The property getter for SignatureProperties should ONLY compare the properties which make up the "domain signature" of the object.
            If you choose NOT to override this method (which will be the most common scenario), then you should decorate
            the appropriate property(s) with [DomainSignature] and they will be compared automatically.
            This is the preferred method of managing the domain signature of entity objects.
            </summary>
            <remarks>
            This ensures that the entity has at least one property decorated with the [DomainSignature] attribute.
            </remarks>
            <returns>
            Set of properties that should be included in the object signature comparison.
            </returns>
        </member>
        <member name="M:Framework.Core.DomainModel.GenericEntity`1.HasSameNonDefaultIdAs(Framework.Core.DomainModel.GenericEntity{`0})">
            <summary>
            Determines whether self and the provided entity have the same Id values.
            </summary>
            <param name="compareTo">The compare to.</param>
            <returns>
            <c>true</c> if self and the provided entity have the same Id values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Framework.Core.DomainModel.GenericEntity`1.Id">
            <summary>
            Gets or sets entity unique identifier.
            </summary>
            <remarks>
            <para>Id may be of type string, int, custom type, etc.</para>
            <para>Setter is protected to allow unit tests to set this property via reflection and to allow
            domain objects more flexibility in setting this for those objects with assigned Ids.</para>
            <para>This is ignored for XML serialization because it does not have a public setter (which is very much by design).</para>
            </remarks>
            <value>Entity unique identifier.</value>
        </member>
        <member name="T:Framework.Core.Configuration.YamlDatabaseConfigurator">
            <summary>
            Reads database configuration from yaml file.
            </summary>
        </member>
        <member name="M:Framework.Core.Configuration.YamlDatabaseConfigurator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Framework.Core.Configuration.YamlDatabaseConfigurator"/> class.
            </summary>
            <param name="configPath">The config path.</param>
        </member>
        <member name="M:Framework.Core.Configuration.YamlDatabaseConfigurator.Configure(Framework.Core.IApplication,Castle.MicroKernel.IKernel)">
            <summary>
            Fills specified database configuration.
            </summary>
            <param name="application">The application.</param>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="P:Framework.Core.Configuration.YamlDatabaseConfigurator.DatabaseConfiguration">
            <summary>
            Current database configuration.
            </summary>
        </member>
        <member name="T:Framework.Core.Configuration.IConfigurationManager">
            <summary>
            Specifies interface for application configuration manager.
            </summary>
        </member>
        <member name="M:Framework.Core.Configuration.IConfigurationManager.GetSection``1(System.String)">
            <summary>
            Gets the configuration section.
            </summary>
            <typeparam name="T">Section handler type.</typeparam>
            <param name="sectionName">Name of the section.</param>
            <returns>configuration section.</returns>
        </member>
        <member name="P:Framework.Core.Configuration.IConfigurationManager.AppSettings">
            <summary>
            Gets the application settings.
            </summary>
            <value>The app settings.</value>
        </member>
        <member name="T:Framework.Core.Localization.ICultureProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Core.Localization.ICultureProvider.AvailableLanguages">
            <summary>
            Gets the available languages.
            </summary>
            <value>The available languages.</value>
        </member>
        <member name="P:Framework.Core.Localization.ICultureProvider.DefaultCulture">
            <summary>
            Gets the default culture.
            </summary>
            <value>The default culture.</value>
        </member>
        <member name="T:Framework.Core.Helpers.Yaml.YamlMapping">
            <summary>
            Wraps <see cref="T:Yaml.Grammar.Mapping"/> object to provide dynamic access.
            </summary>
        </member>
        <member name="M:Framework.Core.Helpers.Yaml.YamlMapping.#ctor(Yaml.Grammar.Mapping)">
            <summary>
            Initializes a new instance of the <see cref="T:Framework.Core.Helpers.Yaml.YamlMapping"/> class.
            </summary>
            <param name="mapping">The mapping.</param>
        </member>
        <member name="M:Framework.Core.Helpers.Yaml.YamlMapping.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
                <c>true</c> if the operation is successful; otherwise, <c>false</c>. If this method returns false, the run-time binder of the language determines the behavior (in most cases, a run-time exception is thrown).
            </returns>
        </member>
        <member name="M:Framework.Core.Helpers.Yaml.YamlMapping.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes"/> first element is equal to 3.</param>
            <param name="result">The result of the index operation.</param>
            <returns>
                <c>true</c> if the operation is successful; otherwise, <c>false</c>. If this method returns false, the run-time binder of the language determines the behavior (in most cases, a run-time exception is thrown).
            </returns>
        </member>
        <member name="M:Framework.Core.Helpers.Yaml.YamlMapping.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Framework.Core.ApplicationUtility">
            <summary>
            Application helper class. 
            </summary>
        </member>
        <member name="F:Framework.Core.ApplicationUtility.BaseUrlCompulsoryEnd">
            <summary>
             Base Url Compulsory End.
            </summary>
        </member>
        <member name="M:Framework.Core.ApplicationUtility.GetUrlPath(System.String)">
            <summary>
            Gets the short URL.
            </summary>
            <param name="rawUrl">The raw URL.</param>
            <returns>Exclude scheme, host part from full url.</returns>
        </member>
        <member name="P:Framework.Core.ApplicationUtility.Path">
            <summary>
            Full application path.
            </summary>
        </member>
        <member name="T:Framework.Core.Utilities.RegexConverter">
            <summary>
            Regex converter.
            </summary>
        </member>
        <member name="M:Framework.Core.Utilities.RegexConverter.FilterToRegex(System.String)">
            <summary>
            Converts filter expression (i.e. *.txt) to regex expression.
            </summary>
            <param name="filterExpression">The filter expression.</param>
            <returns>The converted expression.</returns>
        </member>
        <member name="T:Framework.Core.Configuration.Environment">
            <summary>
            Specifies application configuration.
            </summary>
        </member>
        <member name="F:Framework.Core.Configuration.Environment.Development">
            <summary>
            The development environment is used on your development computer as you interact manually with the application.
            </summary>
        </member>
        <member name="F:Framework.Core.Configuration.Environment.Test">
            <summary>
            The test environment is used to run automated tests.
            </summary>
        </member>
        <member name="F:Framework.Core.Configuration.Environment.Production">
            <summary>
            The production environment is used when you deploy your application for the world to use.
            </summary>
        </member>
        <member name="T:Framework.Core.Services.IDataService`1">
            <summary>
            Since nearly all of the domain objects you create will have a type of int Id, this 
            data access interface leverages this assumption. If you want an entity with a type 
            other than int, such as string, then use <see cref="T:Framework.Core.Services.IGenericDataService`2"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="T:Framework.Core.Services.IGenericDataService`2">
            <summary>
            Provides a standard interface for data-access.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TId">The type of entity identifier.</typeparam>
        </member>
        <member name="T:Framework.Core.Services.IService">
            <summary>
            Common service interface.
            </summary>
            <remarks>
            This interface does not require implementation. It used only as indicator for components registration.
            </remarks>
        </member>
        <member name="M:Framework.Core.Services.IGenericDataService`2.Find(`1)">
            <summary>
            Finds entity by id specified.
            </summary>
            <param name="id">Entity identifier.</param>
            <returns>Entity or null if a record is not found matching the provided Id.</returns>
        </member>
        <member name="M:Framework.Core.Services.IGenericDataService`2.GetAll">
            <summary>
            Retrieves all items of a given type from repository.
            </summary>
            <returns>Not null collection of <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Framework.Core.Services.IGenericDataService`2.GetPaged(System.Int32,System.Int32)">
            <summary>
            Retrieves items of <typeparamref name="TEntity"/> from repository paged.
            </summary>
            <param name="page">Zero-based index of page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>Not nullable collection of <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Framework.Core.Services.IGenericDataService`2.Count(NHibernate.ICriteria)">
            <summary>
            Counts the specified criteria.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Core.Services.IGenericDataService`2.Save(`0)">
            <summary>
            Saves specified entity to repository.
            </summary>
            <param name="entity">The entity to save.</param>
            <returns><c>true</c> if instance instance has been saved successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Framework.Core.Services.IGenericDataService`2.Delete(`0)">
            <summary>
            Removes specified entity from repository.
            </summary>
            <param name="entity">The entity to remove.</param>
            <returns><c>true</c> if instance instance has been deleted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Framework.Core.Services.IGenericDataService`2.DeleteAll">
            <summary>
            Deletes all entities of type <typeparamref name="TEntity"/> from repository.
            </summary>
        </member>
        <member name="M:Framework.Core.Services.IGenericDataService`2.CreateQuery">
            <summary>
            Creates the LINQ query used to evaluate an expression tree.
            </summary>
            <returns>Query object used to evaluate an expression tree.</returns>
        </member>
        <member name="T:Framework.Core.IApplication">
            <summary>
            Application interface.
            </summary>
        </member>
        <member name="M:Framework.Core.IApplication.Configure(Castle.Windsor.IWindsorContainer)">
            <summary>
            Configures application instance.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="P:Framework.Core.IApplication.Environment">
            <summary>
            Gets the application environment.
            </summary>
            <value>The application environment.</value>
        </member>
        <member name="P:Framework.Core.IApplication.RootPath">
            <summary>
            Gets application root path.
            </summary>
            <value>The application path.</value>
        </member>
        <member name="P:Framework.Core.IApplication.DatabaseConfiguration">
            <summary>
            Gets the database configuration.
            </summary>
            <value>The database configuration.</value>
        </member>
        <member name="T:Framework.Core.Helpers.Images.IImageUtility">
            <summary>
            Specifies image processing interface.
            </summary>
        </member>
        <member name="M:Framework.Core.Helpers.Images.IImageUtility.ResizeImage(System.Drawing.Image,System.String,System.Int32,System.Int32)">
            <summary>
            Resizes the image.
            </summary>
            <param name="source">The input image.</param>
            <param name="resized">Target resized file path.</param>
            <param name="width">Width of the resized image. If it is equal to 0 then it will not be included into calculations.</param>
            <param name="height">Height of the resized image. If it is equal to 0 then it will not be included into calculations.</param>
            <remarks>
            If any of passed <paramref name="width"/> or <paramref name="height"/> is equal to 0 then parameter is excluded from calculations.
            If both parameters are equal to 0 then original image will serve as thumbnail.
            The result thumbnail will not be wider than <paramref name="width"/> and
            will not be higher than <paramref name="height"/>.
            </remarks>
        </member>
        <member name="M:Framework.Core.Helpers.Images.IImageUtility.ResizeImage(System.IO.Stream,System.String,System.Int32,System.Int32)">
            <summary>
            Resizes the image.
            </summary>
            <param name="source">The input stream.</param>
            <param name="resized">Target resized file path.</param>
            <param name="width">Width of the resized image. If it is equal to 0 then it will not be included into calculations.</param>
            <param name="height">Height of the resized image. If it is equal to 0 then it will not be included into calculations.</param>
            <remarks>
            If any of passed <paramref name="width"/> or <paramref name="height"/> is equal to 0 then parameter is excluded from calculations.
            If both parameters are equal to 0 then original image will serve as thumbnail.
            The result thumbnail will not be wider than <paramref name="width"/> and
            will not be higher than <paramref name="height"/>.
            </remarks>
        </member>
        <member name="M:Framework.Core.Helpers.Images.IImageUtility.ResizeImage(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Resizes the image.
            </summary>
            <param name="source">Name of the source file.</param>
            <param name="resized">Target resized file path.</param>
            <param name="width">Width of the resized image. If it is equal to 0 then it will not be included into calculations.</param>
            <param name="height">Height of the resized image. If it is equal to 0 then it will not be included into calculations.</param>
            <remarks>
            If any of passed <paramref name="width"/> or <paramref name="height"/> is equal to 0 then parameter is excluded from calculations.
            If both parameters are equal to 0 then original image will serve as thumbnail.
            The result thumbnail will not be wider than <paramref name="width"/> and
            will not be higher than <paramref name="height"/>.
            </remarks>
        </member>
        <member name="M:Framework.Core.Helpers.Images.IImageUtility.AddWatermark(System.String,System.String,System.String)">
            <summary>
            Adds a watermark to <paramref name="source"/>.
            </summary>
            <param name="source">The source file.</param>
            <param name="watermark">The watermark file.</param>
            <param name="destination">The destination file.</param>
        </member>
        <member name="T:Framework.Core.Configuration.DatabaseConfiguration">
            <summary>
            Provides universal configuration for supported database platforms. Use properties dictionary for platform specific options.
            </summary>
        </member>
        <member name="F:Framework.Core.Configuration.DatabaseConfiguration.ConnectionStringKey">
            <summary>
            Use connection String custom property to override default connection string.
            </summary>
        </member>
        <member name="F:Framework.Core.Configuration.DatabaseConfiguration.InMemoryDatabase">
            <summary>
            Database name for sqlite in memory database.
            </summary>
        </member>
        <member name="M:Framework.Core.Configuration.DatabaseConfiguration.GetConnectionString">
            <summary>
            Gets the database specific connection string.
            </summary>
            <returns>connection string.</returns>
        </member>
        <member name="P:Framework.Core.Configuration.DatabaseConfiguration.Platform">
            <summary>
            Gets or sets the database platform.
            </summary>
            <value>The platform.</value>
        </member>
        <member name="P:Framework.Core.Configuration.DatabaseConfiguration.Host">
            <summary>
            Gets or sets the database host.
            </summary>
            <value>The database server host name.</value>
        </member>
        <member name="P:Framework.Core.Configuration.DatabaseConfiguration.Database">
            <summary>
            Gets or sets the database name.
            </summary>
            <value>The database name.</value>
        </member>
        <member name="P:Framework.Core.Configuration.DatabaseConfiguration.Username">
            <summary>
            Gets or sets the database username.
            </summary>
            <value>The database username.</value>
        </member>
        <member name="P:Framework.Core.Configuration.DatabaseConfiguration.Password">
            <summary>
            Gets or sets the database password.
            </summary>
            <value>The database password.</value>
        </member>
        <member name="P:Framework.Core.Configuration.DatabaseConfiguration.Properties">
            <summary>
            Gets custom properties.
            </summary>
            <value>The custom properties.</value>
        </member>
        <member name="T:Framework.Core.Check">
            <summary>
            Arguments validation helper.
            </summary>
        </member>
        <member name="M:Framework.Core.Check.IsNotEmpty(System.Guid,System.String)">
            <summary>
            Validates that <paramref name="argument"/> is not empty.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="M:Framework.Core.Check.IsNotEmpty(System.String,System.String)">
            <summary>
            Validates that <paramref name="argument"/> is not null or empty.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="M:Framework.Core.Check.IsNotOutOfLength(System.String,System.Int32,System.String)">
            <summary>
            Validates that <paramref name="argument"/> length not exceed <paramref name="length"/>.
            </summary>
            <param name="argument">The argument.</param>
            <param name="length">The length.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="M:Framework.Core.Check.IsNotNull(System.Object,System.String)">
            <summary>
            Validates that <paramref name="argument"/> is not null.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="M:Framework.Core.Check.IsValidType``1(System.Object,System.String)">
            <summary>
            Validates that <paramref name="argument"/> is not null.
            </summary>
            <typeparam name="T">Required argument type.</typeparam>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="M:Framework.Core.Check.IsNotNegative``1(``0,System.String)">
            <summary>
            Validates that <paramref name="argument"/> is not negative number.
            </summary>
            <typeparam name="T">Argument type.</typeparam>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="M:Framework.Core.Check.IsPositive``1(``0,System.String)">
            <summary>
            Validates that <paramref name="argument"/> is positive number.
            </summary>
            <typeparam name="T">Argument type.</typeparam>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="M:Framework.Core.Check.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Validates that <paramref name="argument"/> is not empty.
            </summary>
            <typeparam name="T">Generic enumeration type.</typeparam>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="M:Framework.Core.Check.IsFileExists(System.String,System.String)">
            <summary>
            Validates that file specified by path <paramref name="argument"/> exists.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="T:Framework.Core.Utilities.Email.EmailSender">
            <summary>
            Summary description for OutsideMailer.
            </summary>
        </member>
        <member name="M:Framework.Core.Utilities.Email.EmailSender.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Framework.Core.Utilities.Email.EmailSender"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="login">The login.</param>
            <param name="psw">The PSW.</param>
        </member>
        <member name="M:Framework.Core.Utilities.Email.EmailSender.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.Net.Mail.AttachmentCollection,System.Boolean)">
            <summary>
            Sends emails to the specified address.
            </summary>
            <param name="from">From name.</param>
            <param name="fromEmail">From email.</param>
            <param name="to">To name.</param>
            <param name="toEmail">To email.</param>
            <param name="subject">Email subject</param>
            <param name="text">Email body.</param>
            <param name="attachPath">Path to the Attachments.</param>
            <param name="isHtmlFormat">Send in html format.</param>
            <returns>True if succedeed.</returns>
        </member>
        <member name="M:Framework.Core.Utilities.Email.EmailSender.SendEmail(System.String,System.String,System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.String,System.String,System.Net.Mail.AttachmentCollection,System.Boolean)">
            <summary>
            Sends emails to the specified address.
            </summary>
            <param name="from">From name.</param>
            <param name="fromEmail">From email.</param>
            <param name="toEmails">Collection of To emails.</param>
            <param name="subject">Email subject</param>
            <param name="text">Email body.</param>
            <param name="attachPath">Path to the attachment.</param>
            <param name="isHtmlFormat">Send in html format.</param>
            <returns>True if succedeed.</returns>
        </member>
        <member name="M:Framework.Core.Utilities.Email.EmailSender.SendEmail(System.String,System.String,System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.String,System.String,System.Net.Mail.Attachment,System.Boolean)">
            <summary>
            Sends the email.
            </summary>
            <param name="from">From.</param>
            <param name="fromEmail">From email.</param>
            <param name="toEmails">To emails.</param>
            <param name="ccEmails">The cc emails.</param>
            <param name="bccEmails">The BCC emails.</param>
            <param name="subject">The subject.</param>
            <param name="text">The text.</param>
            <param name="attach">The attach.</param>
            <param name="isHtmlFormat">if set to <c>true</c> [is HTML format].</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Core.Utilities.Email.EmailSender.SendMail(System.Net.Mail.MailMessage)">
            <summary>
            Sends the mail.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="T:Framework.Core.Helpers.Regex.RegexValidationConfig">
            <summary>
            Describes regex validation templates.
            </summary>
        </member>
        <member name="M:Framework.Core.Helpers.Regex.RegexValidationConfig.GetPattern(Framework.Core.Helpers.Regex.RegexTemplates)">
            <summary>
            Gets the regex pattern by template key.
            </summary>
            <param name="templateKey">The template key.</param>
            <returns></returns>
        </member>
        <member name="T:Framework.Core.Helpers.Inflector">
            <summary>
            The Inflector class transforms words from one form to another. 
            For example, from singular to plural.
            </summary>
        </member>
        <member name="M:Framework.Core.Helpers.Inflector.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Framework.Core.Helpers.Inflector"/> class. 
            </summary>
        </member>
        <member name="M:Framework.Core.Helpers.Inflector.Pluralize(System.String)">
            <summary>
            Return the plural of a word.
            </summary>
            <param name="word">The singular form.</param>
            <returns>The plural form of <paramref name="word"/>.</returns>
        </member>
        <member name="M:Framework.Core.Helpers.Inflector.Singularize(System.String)">
            <summary>
            Return the singular of a word.
            </summary>
            <param name="word">The plural form.</param>
            <returns>The singular form of <paramref name="word"/>.</returns>
        </member>
        <member name="T:Framework.Core.Constants">
            <summary>
             Project constants.
            </summary>
        </member>
        <member name="F:Framework.Core.Constants.Environment">
            <summary>
             Environment constant.
            </summary>
        </member>
        <member name="F:Framework.Core.Constants.ActionResult">
            <summary>
            ActionResult constant
            </summary>
        </member>
        <member name="F:Framework.Core.Constants.ActionResultMessage">
            <summary>
            ActionResultMessage constant
            </summary>
        </member>
        <member name="F:Framework.Core.Constants.PageModeCookieName">
            <summary>
            PageModeCookieName constant
            </summary>
        </member>
        <member name="F:Framework.Core.Constants.CultureCookieName">
            <summary>
            CultureCookieName constant
            </summary>
        </member>
        <member name="F:Framework.Core.Constants.DefaultCulture">
            <summary>
            Default culture constant.
            </summary>
        </member>
        <member name="T:Framework.Core.Infrastructure.Message">
            <summary>
            Contains flash message data.
            </summary>
        </member>
        <member name="P:Framework.Core.Infrastructure.Message.Text">
            <summary>
            Gets or sets the message text.
            </summary>
            <value>The message text.</value>
        </member>
        <member name="P:Framework.Core.Infrastructure.Message.MessageType">
            <summary>
            Gets or sets the type of the message.
            </summary>
            <value>The type of the message.</value>
        </member>
        <member name="T:Framework.Core.Helpers.Images.DefaultImageUtility">
            <summary>
            Default <see cref="T:Framework.Core.Helpers.Images.IImageUtility"/> implementation. Using GDI+ to process images.
            </summary>
        </member>
        <member name="M:Framework.Core.Helpers.Images.DefaultImageUtility.ResizeImage(System.Drawing.Image,System.String,System.Int32,System.Int32)">
            <summary>
            Resizes the image.
            </summary>
            <param name="source">The input image.</param>
            <param name="resized">Target resized file path.</param>
            <param name="width">Width of the target.</param>
            <param name="height">Height of the target.</param>
            <remarks>
            If any of passed <paramref name="width"/> or <paramref name="height"/> is equal to 0 then parameter is excluded from calculations.
            If both parameters are equal to 0 then original image will serve as thumbnail.
            The result thumbnail will not be wider than <paramref name="width"/> and
            will not be higher than <paramref name="height"/>.
            </remarks>
        </member>
        <member name="M:Framework.Core.Helpers.Images.DefaultImageUtility.ResizeImage(System.IO.Stream,System.String,System.Int32,System.Int32)">
            <summary>
            Resizes the image.
            </summary>
            <param name="source">The input stream.</param>
            <param name="resized">Target resized file path.</param>
            <param name="width">Width of the target.</param>
            <param name="height">Height of the target.</param>
            <remarks>
            If any of passed <paramref name="width"/> or <paramref name="height"/> is equal to 0 then parameter is excluded from calculations.
            If both parameters are equal to 0 then original image will serve as thumbnail.
            The result thumbnail will not be wider than <paramref name="width"/> and
            will not be higher than <paramref name="height"/>.
            </remarks>
        </member>
        <member name="M:Framework.Core.Helpers.Images.DefaultImageUtility.ResizeImage(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Resizes the image.
            </summary>
            <param name="source">Name of the source file.</param>
            <param name="resized">Name of the target file.</param>
            <param name="width">Width of the target. If it is equal to 0 then it will not be included into calculations.</param>
            <param name="height">Height of the target. If it is equal to 0 then it will not be included into calculations.</param>
            <remarks>
            If any of passed <paramref name="width"/> or <paramref name="height"/> is equal to 0 then parameter is excluded from calculations.
            If both parameters are equal to 0 then original image will serve as thumbnail.
            The result thumbnail will not be wider than <paramref name="width"/> and
            will not be higher than <paramref name="height"/>.
            </remarks>
        </member>
        <member name="M:Framework.Core.Helpers.Images.DefaultImageUtility.AddWatermark(System.String,System.String,System.String)">
            <summary>
            Adds a watermark to <paramref name="source"/>.
            </summary>
            <param name="source">The source file.</param>
            <param name="watermark">The watermark file.</param>
            <param name="destination">The destination file.</param>
        </member>
        <member name="T:Framework.Core.Extensions.CloneEntityInjection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Framework.Core.DomainModel.IMappedModel`2">
            <summary>
            Specifies that object of <typeparamref name="TTargetModel"/> can be mapped from <typeparamref name="TSourceModel"/> and vise versa.
            </summary>
            <typeparam name="TSourceModel">The type of source model.</typeparam>
            <typeparam name="TTargetModel">The type of target model.</typeparam>
        </member>
        <member name="M:Framework.Core.DomainModel.IMappedModel`2.MapFrom(`0)">
            <summary>
            Maps current instance from source model.
            </summary>
            <param name="from">Source model.</param>
            <returns>Mapped target model.</returns>
        </member>
        <member name="M:Framework.Core.DomainModel.IMappedModel`2.MapTo(`0)">
            <summary>
            Maps current instance to source model.
            </summary>
            <param name="to">Source model.</param>
            <returns>Mapped source model.</returns>
        </member>
        <member name="T:Framework.Core.Configuration.ConfigurationManagerWrapper">
            <summary>
            Default implementation for <see cref="T:Framework.Core.Configuration.IConfigurationManager"/>. Uses default .NET configuration system.
            </summary>
        </member>
        <member name="M:Framework.Core.Configuration.ConfigurationManagerWrapper.GetSection``1(System.String)">
            <summary>
            Gets the configuration section.
            </summary>
            <typeparam name="T">Section handler type.</typeparam>
            <param name="sectionName">Name of the section.</param>
            <returns>configuration section.</returns>
        </member>
        <member name="P:Framework.Core.Configuration.ConfigurationManagerWrapper.AppSettings">
            <summary>
            Gets the application settings.
            </summary>
            <value>The app settings.</value>
        </member>
        <member name="T:Framework.Core.Helpers.EnumHelper">
            <summary>
            Provides helper methods for enumerations.
            </summary>
        </member>
        <member name="M:Framework.Core.Helpers.EnumHelper.Parse``1(System.String,``0)">
            <summary>
            Parses the specified value.
            </summary>
            <typeparam name="T">Enum type.</typeparam>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns>parsed value or default enum value.</returns>
        </member>
        <member name="M:Framework.Core.Helpers.EnumHelper.Parse``1(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <typeparam name="T">Enum type.</typeparam>
            <param name="value">The value.</param>
            <returns>parsed value or default enum value.</returns>
        </member>
        <member name="M:Framework.Core.Helpers.EnumHelper.GetKey``1(``0)">
            <summary>
            Gets the <see cref="T:System.String"/> key for value specified.
            </summary>
            <typeparam name="T">Type of enum.</typeparam>
            <param name="value">The value.</param>
            <returns>the <see cref="T:System.String"/> key.</returns>
        </member>
        <member name="M:Framework.Core.Helpers.EnumHelper.GetKeys``1">
            <summary>
            Gets the <see cref="T:System.String"/> keys for values of enum specified.
            </summary>
            <typeparam name="T">Type of enum.</typeparam>
            <returns>collection of enum <see cref="T:System.String"/> key.</returns>
        </member>
        <member name="M:Framework.Core.Helpers.EnumHelper.Humanize``1(``0)">
            <summary>
            Gets the String representation for value specified.
            </summary>
            <typeparam name="T">Type of enum.</typeparam>
            <param name="value">The value.</param>
            <returns>Enum value description or name.</returns>
        </member>
        <member name="T:Framework.Core.Extensions.ListExtentions">
            <summary>
            Extends <see cref="!:IEnumerable"/> class functionality.
            </summary>
        </member>
        <member name="M:Framework.Core.Extensions.ListExtentions.Update``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Updates the specified IEnumerable list.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="outer">The outer.</param>
            <param name="updator">The updator.</param>
        </member>
        <member name="T:Framework.Core.Infrastructure.MessageType">
            <summary>
            Specifies flash message type.
            </summary>
        </member>
        <member name="F:Framework.Core.Infrastructure.MessageType.Success">
            <summary>
            Success message.
            </summary>
        </member>
        <member name="F:Framework.Core.Infrastructure.MessageType.Notice">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Framework.Core.Infrastructure.MessageType.Info">
            <summary>
            Information message.
            </summary>
        </member>
        <member name="F:Framework.Core.Infrastructure.MessageType.Error">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="T:Framework.Core.Helpers.Regex.RegexTemplates">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.UIntValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.PositivIntValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.UIntValueOrUnlimited">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.IntValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.UDoubleValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.DoubleValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.MoneyValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.SizeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.Email">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.Url">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.UrlPart">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.ValidName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.AlphaNumeric">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.Phone">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Core.Helpers.Regex.RegexTemplates.FaxOptional">
            <summary>
            
            </summary>
        </member>
        <member name="T:Framework.Core.DomainModel.DomainSignatureAttribute">
            <summary>
            Facilitates indicating which property(s) describe the unique signature of an 
            entity. See <see cref="M:Framework.Core.DomainModel.GenericEntity`1.GetTypeSpecificSignatureProperties"/> for when this is leveraged.
            </summary>
            <remarks>
            This is intended for use with <see cref="T:Framework.Core.DomainModel.Entity"/>.
            </remarks>
        </member>
        <member name="T:Framework.Core.DomainModel.BaseObjectComparer">
            <summary>
            Provides a comparer for supporting LINQ methods such as Intersect, Union and Distinct.
            This may be used for comparing objects of type <see cref="T:Framework.Core.DomainModel.BaseObject"/> and anything
            that derives from it, such as <see cref="T:Framework.Core.DomainModel.Entity"/>.
            </summary>
            <remarks>
            Microsoft decided that set operators such as Intersect, Union and Distinct should
            not use the IEqualityComparer's Equals() method when comparing objects, but should instead
            use IEqualityComparer's GetHashCode() method.
            </remarks>
        </member>
        <member name="M:Framework.Core.DomainModel.BaseObjectComparer.Equals(Framework.Core.DomainModel.BaseObject,Framework.Core.DomainModel.BaseObject)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type T to compare..</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>
            <c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Framework.Core.DomainModel.BaseObjectComparer.GetHashCode(Framework.Core.DomainModel.BaseObject)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The object for which a hash code is to be returned.</param>
            <returns>
            A hash code for specified object, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Framework.Core.Application">
            <summary>
            Default <see cref="T:Framework.Core.IApplication"/> implementation.
            </summary>
        </member>
        <member name="M:Framework.Core.Application.Configure(Castle.Windsor.IWindsorContainer)">
            <summary>
            Configures application instance.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="P:Framework.Core.Application.Environment">
            <summary>
            Gets the application environment.
            </summary>
            <value>The application environment.</value>
        </member>
        <member name="P:Framework.Core.Application.RootPath">
            <summary>
            Gets or sets application root path.
            </summary>
            <value>The application path.</value>
        </member>
        <member name="P:Framework.Core.Application.DatabaseConfiguration">
            <summary>
            Gets the database configuration.
            </summary>
            <value>The database configuration.</value>
        </member>
        <member name="T:Framework.Core.Helpers.Yaml.YamlDocument">
            <summary>
            Wraps yaml document for using dynamic objects.
            </summary>
        </member>
        <member name="M:Framework.Core.Helpers.Yaml.YamlDocument.FromFile(System.String)">
            <summary>
            Loads document froms file.
            </summary>
            <param name="filePath">Full file path.</param>
            <returns>yaml document.</returns>
        </member>
        <member name="M:Framework.Core.Helpers.Yaml.YamlDocument.TryMapValue(Yaml.Grammar.DataItem,System.Object@)">
            <summary>
            Tries wrap <see cref="T:Yaml.Grammar.DataItem"/> object for using dynamic features.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns>wrapped <see cref="T:Yaml.Grammar.DataItem"/> object.</returns>
        </member>
    </members>
</doc>
